
# This file is automatically generated, you probably don't want to edit this

#' @importFrom jmvcore Options
#' @importFrom R6 R6Class
<%= analysis.name %>Options <- R6::R6Class(
    "<%= analysis.name %>Options",
    inherit = jmvcore::Options,
    public = list(
        initialize = function(<%=analysis.options.filter(o => o.type !== 'Data').map(option => {
                if (typeof(option['default']) === 'undefined')
                    return '\n            ' + option.name + ' = NULL';
                return '\n            ' + option.name + ' = ' + imports.sourcifyOption(option['default']);
            }).join()
            %>, ...) {

            super$initialize(
                package='<%= packageName %>',
                name='<%= analysis.name %>',
                requiresData=<%= analysis.options.filter(o => o.type === 'Data') ? 'TRUE' : 'FALSE' %>,
                ...)
        <%=analysis.options.filter(o => o.type !== 'Data').map(option => {
                return '\n            private$..' + option.name + ' <- ' + imports.optionify(option);
                }).join('')
            %>
        <%=analysis.options.filter(o => o.type !== 'Data').map(option => {
                return '\n            self$.addOption(private$..' + option.name + ')';
                }).join('')
            %>
        }),
    active = list(<%=analysis.options.filter(o => o.type !== 'Data').map(option => {
        return '\n        ' + option.name + ' = function() private$..' + option.name + '$value'
        }).join()
    %>),
    private = list(<%=analysis.options.filter(o => o.type !== 'Data').map(option => {
        return '\n        ..' + option.name + ' = NA';
        }).join()
    %>)
)

#' @import jmvcore
#' @importFrom R6 R6Class
<%= analysis.name %>Results <- <%= imports.resultsify(results, '', true) %>

#' @importFrom jmvcore Analysis
#' @importFrom R6 R6Class
<%= analysis.name %>Base <- R6::R6Class(
    "<%= analysis.name %>Base",
    inherit = jmvcore::Analysis,
    public = list(
        initialize = function(options, data=NULL, datasetId="", analysisId="", revision=0) {
            super$initialize(
                package = '<%= packageName %>',
                name = '<%= analysis.name %>',
                version = c(<%= analysis.version.split('.').join(',') %>),
                options = options,
                results = <%= analysis.name %>Results$new(options=options),
                data = data,
                datasetId = datasetId,
                analysisId = analysisId,
                revision = revision,
                pause = <%= imports.sourcifyResults(analysis.pause ? analysis.pause : null, '            ')%>,
                completeWhenFilled = <%= analysis.completeWhenFilled ? 'TRUE' : 'FALSE' %>)
        }))

#' <%= analysis.title %>
#'
<%= (analysis.description.main || '').replace(/`(.*?)`/g, '\\code{$1}').split('\n').map(line => {
        line = imports.asciify(line);
        return imports.wrap(line, { indent: "#' ", width: 75 })
    }).join("\n#'\n")
%><%
    if (analysis.description && analysis.description.R && analysis.description.R.usage) {
        var usage = analysis.description.R.usage;
        usage = usage.split('\n').join("\n#' ");
        print("\n#'\n#' @examples\n#' ");
        if (analysis.description.R.dontrun !== false)
            print("\\dontrun{\n#' ");
        print(usage);
        if (analysis.description.R.dontrun !== false)
            print("}");
    }
%><%
    if (analysis.description && analysis.description.references) {
        print("\n#' @section References:")
        var refs = analysis.description.references;
        for (var i = 0; i < refs.length; i++) {
            var desc = refs[i];
            print("\n#' " + desc + "\n#'");
        }
    }
%>
<%= analysis.options.map(option => {
    var desc;
    desc = option.description;
    if (typeof desc === 'object')
        desc = desc.R;
    if (desc === undefined)
        desc = '.';
    desc = '@param ' + option.name + ' ' + desc;
    desc = desc.replace(/\s/g, ' ');
    desc = desc.replace(/`(.*?)`/g, '\\code{$1}');
    desc = imports.asciify(desc);
    desc = imports.wrap(desc, { indent: "#'   ", width: 75 });
    desc = desc.replace('  @param', '@param');
    return desc;
    }).join('\n') %>
#' @export
<%= analysis.name %> <- function(<%=analysis.options.map(option => {
    if (_.isUndefined(option['default']))
        return '\n    ' + option.name;
    return '\n    ' + option.name + ' = ' + imports.sourcifyOption(option['default']);
}).join()
%>) {

    options <- <%= analysis.name %>Options$new(<%=analysis.options.filter(o => o.type !== 'Data').map(option => {
        return '\n        ' + option.name + ' = ' + option.name;
    }).join()
    %>)

    results <- <%= analysis.name %>Results$new(
        options = options)

    analysis <- <%= analysis.name %>Class$new(
        options = options,
        data = data)

    analysis$run()
    analysis$render()

    analysis$results
}
